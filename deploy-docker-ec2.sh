#!/bin/bash

# Script de Deploy Automatizado para Docker na EC2
# SafeScore Brasil - safetyscorebrasil.com.br

set -e  # Parar em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Iniciando deploy da aplica√ß√£o...${NC}"

# Verificar se est√° no diret√≥rio correto
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå Erro: docker-compose.yml n√£o encontrado!${NC}"
    echo "Certifique-se de estar no diret√≥rio raiz do projeto."
    exit 1
fi

# Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado!${NC}"
    echo "Criando arquivo .env a partir do exemplo..."
    if [ -f "env.production.example" ]; then
        cp env.production.example .env
        echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANTE: Edite o arquivo .env com suas configura√ß√µes!${NC}"
    else
        echo -e "${RED}‚ùå Erro: Arquivo env.production.example n√£o encontrado!${NC}"
        exit 1
    fi
fi

# Criar diret√≥rios necess√°rios
echo -e "${GREEN}üìÅ Criando diret√≥rios necess√°rios...${NC}"
mkdir -p staticfiles media logs backups

# Parar containers existentes (se houver)
echo -e "${GREEN}üõë Parando containers existentes...${NC}"
docker-compose down 2>/dev/null || true

# Atualizar c√≥digo (se usando Git)
if [ -d ".git" ]; then
    echo -e "${GREEN}üì• Atualizando c√≥digo do reposit√≥rio...${NC}"
    git pull origin main || git pull origin master || echo "Nenhuma atualiza√ß√£o dispon√≠vel"
fi

# Construir imagens Docker
echo -e "${GREEN}üî® Construindo imagens Docker...${NC}"
docker-compose build --no-cache

# Subir apenas banco de dados primeiro
echo -e "${GREEN}üóÑÔ∏è  Iniciando banco de dados...${NC}"
docker-compose up -d db

# Aguardar banco de dados estar pronto
echo -e "${YELLOW}‚è≥ Aguardando banco de dados ficar pronto...${NC}"
sleep 10

# Executar migra√ß√µes
echo -e "${GREEN}üîÑ Executando migra√ß√µes do banco de dados...${NC}"
docker-compose run --rm web python manage.py migrate --noinput || echo "Aviso: Migra√ß√µes podem ter falhado"

# Coletar arquivos est√°ticos
echo -e "${GREEN}üì¶ Coletando arquivos est√°ticos...${NC}"
docker-compose run --rm web python manage.py collectstatic --noinput --clear || echo "Aviso: collectstatic pode ter falhado"

# Subir todos os servi√ßos
echo -e "${GREEN}üöÄ Iniciando todos os servi√ßos...${NC}"
docker-compose up -d

# Aguardar servi√ßos iniciarem
echo -e "${YELLOW}‚è≥ Aguardando servi√ßos iniciarem...${NC}"
sleep 15

# Verificar status
echo -e "${GREEN}üìä Status dos containers:${NC}"
docker-compose ps

# Verificar health checks
echo -e "${GREEN}üè• Verificando sa√∫de dos servi√ßos...${NC}"
sleep 5

# Verificar se web est√° respondendo
if curl -f http://localhost:8000 > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Servi√ßo web est√° respondendo!${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Servi√ßo web ainda n√£o est√° respondendo. Verifique os logs.${NC}"
fi

# Limpar imagens antigas n√£o utilizadas
echo -e "${GREEN}üßπ Limpando imagens antigas...${NC}"
docker image prune -f

# Mostrar informa√ß√µes √∫teis
echo ""
echo -e "${GREEN}‚úÖ Deploy conclu√≠do!${NC}"
echo ""
echo -e "${YELLOW}üìù Comandos √∫teis:${NC}"
echo "  - Ver logs: docker-compose logs -f"
echo "  - Ver logs web: docker-compose logs -f web"
echo "  - Parar servi√ßos: docker-compose stop"
echo "  - Reiniciar servi√ßos: docker-compose restart"
echo "  - Entrar no container: docker-compose exec web bash"
echo ""
echo -e "${YELLOW}üîç Verificando √∫ltimos logs:${NC}"
docker-compose logs --tail=20 web

